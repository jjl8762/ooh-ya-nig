<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>CloakPlay — Cloud apps & games portal</title>

  <!-- Tailwind (Play CDN) for quick styling (not for production). Replace with a build for production. -->
  <script src="https://cdn.tailwindcss.com"></script>

  <!-- React (UMD builds) -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>

  <style>
    /* small helpers */
    .tab-title { max-width: 220px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
    .theme-transition { transition: background-color .18s ease, color .18s ease; }
    .inspect-highlight { outline: 3px dashed rgba(59,130,246,0.92) !important; }
    /* keep iframe area visually separate */
    .iframe-placeholder { min-height: 420px; display:flex; align-items:center; justify-content:center; color:rgba(255,255,255,0.6); }
  </style>
</head>
<body class="bg-gray-900 text-white theme-transition">
  <div id="root" class="min-h-screen"></div>

  <script type="module">
    const { useState, useEffect, useRef } = React;

    /************************************************************************
     * CloakPlay - Single-file React demo
     *
     * Features implemented:
     * - About:Blank cloaking & Tab cloaking (changes document.title and favicon)
     * - Built-in tab system (create, switch, close)
     * - Wide sample collection of apps & games (Now.gg & GeForce NOW links included)
     * - Clean UI with themes
     * - Inspect Element (hover highlights UI elements when enabled)
     * - Optional Password Protection (client-side/localStorage demo — not secure for secrets)
     * - Fast Speeds toggle (UI-only flag you can wire to actual perf toggles)
     * - Automatic iframe-detection fallback: if embed is blocked, shows a button to open in a new tab
     *
     * Usage:
     * - Save as index.html and open or host on any static hosting provider.
     * - Iframes may be blocked by remote providers (X-Frame-Options/CSP); this demo detects that and shows a fallback.
     ************************************************************************/

    // Helper: small favicon setter
    function setFavicon(href) {
      let link = document.querySelector("link[rel~='icon']");
      if (!link) {
        link = document.createElement('link');
        link.rel = 'icon';
        document.getElementsByTagName('head')[0].appendChild(link);
      }
      link.href = href || '/favicon.ico';
    }

    // Simple app component
    function App() {
      // Tabs: each tab is { id, title, url, cloaked, iframeBlocked (bool/null) }
      const [tabs, setTabs] = useState(() => {
        try {
          const v = localStorage.getItem('cloakplay_tabs');
          return v ? JSON.parse(v) : [{ id: 1, title: 'Home', url: 'about:blank', cloaked: true, iframeBlocked: null }];
        } catch { return [{ id: 1, title: 'Home', url: 'about:blank', cloaked: true, iframeBlocked: null }]; }
      });
      const [activeTabId, setActiveTabId] = useState(tabs[0].id);
      const [theme, setTheme] = useState(() => localStorage.getItem('cloakplay_theme') || 'dark');
      const [inspectOn, setInspectOn] = useState(false);
      const [passwordEnabled, setPasswordEnabled] = useState(() => localStorage.getItem('cloakplay_pwd_enabled') === 'true');
      const [passwordHash, setPasswordHash] = useState(() => localStorage.getItem('cloakplay_pwd') || '');
      const [locked, setLocked] = useState(false);
      const [fastMode, setFastMode] = useState(() => localStorage.getItem('cloakplay_fast') !== 'false');
      const iframeRefs = useRef({}); // track iframe elements
      const inspectTimer = useRef(null);

      // Sample app list (you can add more)
      const apps = [
        { id: 'now-arcade', name: 'Retro Arcade', provider: 'Now.gg', url: 'https://now.gg/embed/retro-arcade' },
        { id: 'now-puzzle', name: 'Puzzle Quest', provider: 'Now.gg', url: 'https://now.gg/embed/puzzle-quest' },
        { id: 'gfn-home', name: 'GeForce NOW (Web)', provider: 'GeForce NOW', url: 'https://play.geforcenow.com/' },
        { id: 'web-office', name: 'Office (Web)', provider: 'Web', url: 'https://example.com' },
        // Add your own apps/games here
      ];

      // Themes map (body classes)
      const themes = {
        dark: { cls: 'bg-gray-900 text-white', name: 'Dark' },
        light: { cls: 'bg-white text-gray-900', name: 'Light' },
        midnight: { cls: 'bg-[#061226] text-sky-300', name: 'Midnight' },
        teal: { cls: 'bg-teal-900 text-teal-100', name: 'Teal' },
      };

      // persist settings
      useEffect(() => localStorage.setItem('cloakplay_tabs', JSON.stringify(tabs)), [tabs]);
      useEffect(() => { localStorage.setItem('cloakplay_theme', theme); document.body.className = themes[theme].cls + ' theme-transition'; }, [theme]);
      useEffect(() => localStorage.setItem('cloakplay_fast', fastMode ? 'true' : 'false'), [fastMode]);
      useEffect(() => localStorage.setItem('cloakplay_pwd_enabled', passwordEnabled ? 'true' : 'false'), [passwordEnabled]);
      useEffect(() => localStorage.setItem('cloakplay_pwd', passwordHash || ''), [passwordHash]);

      // Update title & favicon for tab cloaking
      useEffect(() => {
        const active = tabs.find(t => t.id === activeTabId) || tabs[0];
        if (!active) return;
        if (active.cloaked) {
          document.title = 'New tab - Google Chrome';
          // simple blank favicon svg (data URL)
          setFavicon("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32'%3E%3Crect width='32' height='32' fill='%23f5f5f5'/%3E%3C/svg%3E");
        } else {
          document.title = active.title || 'CloakPlay';
          setFavicon(null);
        }
      }, [activeTabId, tabs]);

      // lock at startup if password enabled
      useEffect(() => {
        if (passwordEnabled && passwordHash) setLocked(true);
        else setLocked(false);
      }, [passwordEnabled, passwordHash]);

      // add a tab
      function addTab({ title = 'Blank', url = 'about:blank', cloaked = false } = {}) {
        const id = Date.now() + Math.floor(Math.random() * 1000);
        const t = { id, title, url, cloaked, iframeBlocked: null };
        setTabs(s => [...s, t]);
        setActiveTabId(id);
      }

      // close tab
      function closeTab(id) {
        setTabs(s => s.filter(t => t.id !== id));
        if (activeTabId === id) {
          const remaining = tabs.filter(t => t.id !== id);
          if (remaining.length) setActiveTabId(remaining[0].id);
        }
      }

      // toggle cloaking on a specific tab
      function toggleCloak(id) {
        setTabs(s => s.map(t => t.id === id ? { ...t, cloaked: !t.cloaked } : t));
      }

      // set/clear password (demo: stores base64 in localStorage; not secure for real secrets)
      function setPassword(pwd) {
        if (!pwd) {
          setPasswordHash('');
          setPasswordEnabled(false);
          alert('Password cleared (demo)');
          return;
        }
        try {
          const hashed = btoa(pwd);
          setPasswordHash(hashed);
          setPasswordEnabled(true);
          alert('Password set (stored locally, demo only)');
          setLocked(true);
        } catch (e) { alert('Failed to set password'); }
      }

      // Attempt to unlock (simple btoa check)
      function tryUnlock(pwd) {
        try {
          return btoa(pwd) === passwordHash;
        } catch { return false; }
      }

      // When opening app, create a tab for it (iframe will attempt to load). If blocked, user sees fallback.
      function openApp(app) {
        addTab({ title: app.name, url: app.url, cloaked: false });
      }

      // Iframe detection: listen for message from iframe indicating it's loaded and allowed.
      // Many providers block iframes via headers and don't send messages; we'll detect via a timeout & iframe contentWindow access try.
      useEffect(() => {
        function onMessage(e) {
          // Could implement future cross-origin handshake; leave empty for now.
        }
        window.addEventListener('message', onMessage);
        return () => window.removeEventListener('message', onMessage);
      }, []);

      // After an iframe is mounted, attempt to detect if its content can be accessed (if blocked by X-Frame-Options, this will throw / be blank)
      function onIframeLoad(tab) {
        // Attempt to read contentDocument; if cross-origin and allowed, it's okay — otherwise will throw or be null.
        // We'll use a safe detection: set a timeout and check iframe's naturalWidth (some browsers keep it) or try access.
        const el = iframeRefs.current[tab.id];
        if (!el) return markBlocked(tab.id, false); // no iframe element — not blocked, just empty
        // Reset blocked indicator until we detect otherwise
        markBlocked(tab.id, false);
        // Try a small safe probe after short delay
        setTimeout(() => {
          try {
            // Accessing contentDocument may throw DOMException if blocked; for same-origin it will work.
            const doc = el.contentDocument;
            // If doc exists and has body, likely allowed; if doc is null, might be blocked
            if (!doc || !doc.body) {
              markBlocked(tab.id, true);
            } else {
              // Additionally, many providers load a placeholder page that refuses framing — keep it as allowed.
              markBlocked(tab.id, false);
            }
          } catch (err) {
            // Cross-origin access throwing likely means it's embedded but cross-origin — doesn't necessarily mean blocked.
            // But when X-Frame-Options denies, the iframe often remains empty or closed; we conservatively mark as blocked if the iframe has zero size or no contentWindow.
            try {
              const cw = el.contentWindow;
              if (!cw || (cw.document && !cw.document.body)) markBlocked(tab.id, true);
              else markBlocked(tab.id, false);
            } catch (e) {
              markBlocked(tab.id, true);
            }
          }
        }, 450);
        // Final safety timeout: if after 2s still unknown, mark blocked
        setTimeout(() => {
          const cur = tabs.find(t => t.id === tab.id);
          if (cur && cur.iframeBlocked === null) markBlocked(tab.id, true);
        }, 2100);
      }

      // mark an iframe blocked or allowed
      function markBlocked(id, blocked) {
        setTabs(s => s.map(t => t.id === id ? { ...t, iframeBlocked: blocked } : t));
      }

      // Inspect element simulation: highlight hovered elements (except iframes)
      useEffect(() => {
        function onMove(e) {
          if (!inspectOn) return;
          const el = document.elementFromPoint(e.clientX, e.clientY);
          if (!el || el.tagName === 'IFRAME' || el === document.body || el === document.documentElement) return;
          el.classList.add('inspect-highlight');
          if (inspectTimer.current) clearTimeout(inspectTimer.current);
          inspectTimer.current = setTimeout(() => {
            try { el.classList.remove('inspect-highlight'); } catch {}
          }, 800);
        }
        window.addEventListener('mousemove', onMove);
        return () => { window.removeEventListener('mousemove', onMove); if (inspectTimer.current) clearTimeout(inspectTimer.current); }
      }, [inspectOn]);

      // UI: get active tab
      const active = tabs.find(t => t.id === activeTabId) || tabs[0];

      // UI helper: open current tab's url in new tab
      function openInNewTab(url) {
        window.open(url, '_blank', 'noopener,noreferrer');
      }

      // Basic keyboard shortcuts (Ctrl+T to new tab, Ctrl+W to close active)
      useEffect(() => {
        function onKey(e) {
          if (e.ctrlKey && e.key.toLowerCase() === 't') { e.preventDefault(); addTab({ title: 'Blank', url: 'about:blank', cloaked: true }); }
          if (e.ctrlKey && e.key.toLowerCase() === 'w') { e.preventDefault(); closeTab(activeTabId); }
        }
        window.addEventListener('keydown', onKey);
        return () => window.removeEventListener('keydown', onKey);
      }, [activeTabId, tabs]);

      // Render
      return (
        React.createElement('div', { className: 'min-h-screen flex flex-col' },
          // Top header
          React.createElement('header', { className: 'flex items-center justify-between p-3 border-b' },
            React.createElement('div', { className: 'flex items-center gap-3' },
              React.createElement('button', { onClick: () => addTab({ title:'About:Blank', url:'about:blank', cloaked:true}), className: 'px-2 py-1 rounded bg-slate-800/40' }, '+ New Tab'),
              React.createElement('div', { className: 'hidden md:flex gap-3 items-center text-sm opacity-80' },
                React.createElement('strong', null, 'CloakPlay'),
                React.createElement('span', { className: 'px-2 py-0.5 rounded bg-neutral-700/30 text-xs' }, 'Cloud'),
                React.createElement('label', { className: 'flex items-center gap-2' },
                  React.createElement('input', { type: 'checkbox', checked: fastMode, onChange: () => setFastMode(s => !s) }),
                  React.createElement('span', { className: 'text-xs' }, 'Fast Speeds')
                )
              )
            ),
            React.createElement('div', { className: 'flex items-center gap-3' },
              React.createElement('select', { value: theme, onChange: (e) => setTheme(e.target.value), className: 'rounded p-1 bg-transparent border' },
                Object.keys(themes).map(k => React.createElement('option', { key: k, value: k }, themes[k].name))
              ),
              React.createElement('button', { onClick: () => setInspectOn(s => !s), className: 'px-2 py-1 rounded border ' + (inspectOn ? 'bg-sky-700/30' : '') }, inspectOn ? 'Inspector: ON' : 'Inspector: OFF'),
              React.createElement('label', { className: 'flex items-center gap-2' },
                React.createElement('input', { type: 'checkbox', checked: passwordEnabled, onChange: (e) => { setPasswordEnabled(e.target.checked); if (!e.target.checked) { setPasswordHash(''); localStorage.removeItem('cloakplay_pwd'); } } }),
                React.createElement('span', { className: 'text-sm' }, 'Password')
              ),
              React.createElement('button', { className: 'px-2 py-1 rounded bg-sky-600 text-white', onClick: () => alert('About: This is a demo portal implementing tab cloaking, built-in tabs, Now.gg & GeForce NOW quick links, inspect element simulation, themes, and optional password protection (client-side demo).') }, 'About')
            )
          ),

          // Tab bar
          React.createElement('nav', { className: 'flex items-center gap-2 px-2 py-1 overflow-x-auto border-b' },
            tabs.map(t => React.createElement('div', {
              key: t.id,
              className: 'flex items-center gap-2 px-3 py-1 rounded ' + (t.id === activeTabId ? 'bg-sky-700/30' : '')
            },
              React.createElement('button', { onClick: () => setActiveTabId(t.id), title: t.title, className: 'tab-title text-sm' }, t.cloaked ? 'New tab - Google Chrome' : t.title),
              React.createElement('button', { onClick: () => toggleCloak(t.id), title: 'Toggle Cloak', className: 'text-xs px-1 border rounded' }, 'C'),
              React.createElement('button', { onClick: () => closeTab(t.id), title: 'Close', className: 'text-xs px-1' }, '✕')
            ))
          ),

          // Main grid
          React.createElement('main', { className: 'flex-1 grid grid-cols-1 md:grid-cols-4 gap-4 p-4' },
            // Left: Apps list
            React.createElement('aside', { className: 'md:col-span-1 space-y-4' },
              React.createElement('div', { className: 'p-3 rounded border bg-black/20' },
                React.createElement('div', { className: 'flex items-center justify-between' },
                  React.createElement('div', { className: 'flex items-center gap-2' }, React.createElement('svg', { width: 18, height: 18, viewBox: '0 0 24 24', fill: 'none', stroke: 'currentColor' },
                    React.createElement('rect', { x: 3, y: 3, width: 7, height: 7, rx: 1 }),
                    React.createElement('rect', { x: 14, y: 3, width: 7, height: 7, rx: 1 }),
                    React.createElement('rect', { x: 14, y: 14, width: 7, height: 7, rx: 1 }),
                    React.createElement('rect', { x: 3, y: 14, width: 7, height: 7, rx: 1 })
                  ), React.createElement('h3', { className: 'font-semibold' }, 'Apps & Games')),
                  React.createElement('div', { className: 'text-xs opacity-70' }, '(' + apps.length + ')')
                ),
                React.createElement('div', { className: 'mt-3 grid grid-cols-1 gap-2' },
                  apps.map(a => React.createElement('div', {
                    key: a.id,
                    className: 'p-2 rounded border hover:shadow cursor-pointer flex items-center justify-between',
                    onClick: () => openApp(a)
                  },
                    React.createElement('div', { className: 'text-sm' },
                      React.createElement('div', { className: 'font-medium' }, a.name),
                      React.createElement('div', { className: 'text-xs opacity-60' }, a.provider)
                    ),
                    React.createElement('div', { className: 'text-xs opacity-60' }, '▶')
                  ))
                )
              ),

              // Quick actions
              React.createElement('div', { className: 'p-3 rounded border bg-black/10' },
                React.createElement('h4', { className: 'font-semibold' }, 'Quick Actions'),
                React.createElement('div', { className: 'mt-2 flex flex-col gap-2' },
                  React.createElement('button', { onClick: () => addTab({ title: 'About:Blank', url: 'about:blank', cloaked: true }), className: 'px-2 py-1 rounded bg-neutral-800/40' }, 'Open About:Blank'),
                  React.createElement('button', { onClick: () => {
                    const pwd = prompt('Choose a password (demo only):');
                    if (pwd === null) return;
                    if (pwd === '') { setPassword(''); return; }
                    setPassword(pwd);
                  }, className: 'px-2 py-1 rounded bg-neutral-800/40' }, 'Set Password (demo)'),
                  React.createElement('button', { onClick: () => { setPassword(''); alert('Password removed'); }, className: 'px-2 py-1 rounded bg-neutral-800/40' }, 'Remove Password')
                )
              )
            ),

            // Right: main browser area / tabs content
            React.createElement('section', { className: 'md:col-span-3 flex flex-col gap-3' },
              React.createElement('div', { className: 'p-2 rounded border flex items-center gap-2 justify-between bg-black/10' },
                React.createElement('div', { className: 'flex-1' },
                  React.createElement('div', { className: 'text-sm font-medium' }, active ? (active.cloaked ? 'New tab - Google Chrome' : active.title) : 'No Tab'),
                  React.createElement('div', { className: 'text-xs opacity-70' }, active ? active.url : '')
                ),
                React.createElement('div', { className: 'flex items-center gap-2 text-xs opacity-70' },
                  React.createElement('div', null, 'Theme: ' + (themes[theme]?.name || theme))
                )
              ),

              // iframe area or placeholder & fallback
              React.createElement('div', { className: 'flex-1 rounded border overflow-hidden bg-black/5' },
                active && active.url ? (
                  active.iframeBlocked ? (
                    // Fallback when blocked: show message + open-in-new-tab button
                    React.createElement('div', { className: 'iframe-placeholder flex-col p-6' },
                      React.createElement('div', { className: 'mb-3 text-lg' }, 'This app cannot be embedded in an iframe.'),
                      React.createElement('div', { className: 'text-sm opacity-70 mb-4' }, 'The provider likely blocked embedding with X-Frame-Options / Content-Security-Policy.'),
                      React.createElement('div', { className: 'flex gap-2' },
                        React.createElement('button', { onClick: () => openInNewTab(active.url), className: 'px-3 py-2 rounded bg-sky-600 text-white' }, 'Open in new tab'),
                        React.createElement('button', { onClick: () => setTabs(s => s.map(t => t.id === active.id ? { ...t, iframeBlocked: false } : t)), className: 'px-3 py-2 rounded border' }, 'Try again (reload)')
                      )
                    )
                  ) : (
                    // Attempt iframe embed
                    React.createElement('iframe', {
                      key: active.id,
                      ref: el => { if (el) { iframeRefs.current[active.id] = el; } },
                      src: active.url,
                      title: active.title,
                      style: { width: '100%', height: '640px', border: 0 },
                      onLoad: () => onIframeLoad(active)
                    })
                  )
                ) : (
                  React.createElement('div', { className: 'iframe-placeholder p-6' }, 'No page loaded — pick an app or create a new tab.')
                )
              ),

              // Features summary
              React.createElement('div', { className: 'p-3 rounded border bg-black/10' },
                React.createElement('h4', { className: 'font-semibold' }, 'Features'),
                React.createElement('ul', { className: 'mt-2 text-sm list-disc list-inside space-y-1 opacity-80' },
                  React.createElement('li', null, 'About:Blank Cloaking — open blank tabs and cloak title and favicon.'),
                  React.createElement('li', null, 'Tab Cloaking — per-tab toggle to hide the real title.'),
                  React.createElement('li', null, 'Built-in tab system with create/switch/close.'),
                  React.createElement('li', null, 'Wide collection of apps & games — Now.gg & GeForce NOW quick links included.'),
                  React.createElement('li', null, 'Clean, easy UI — single-file React + Tailwind demo.'),
                  React.createElement('li', null, 'Inspect Element simulation — toggle Inspector then hover to highlight elements.'),
                  React.createElement('li', null, 'Various Themes — multiple color schemes.'),
                  React.createElement('li', null, 'Password Protection (Optional) — demo stored in browser localStorage (NOT secure for real secrets).')
                )
              )
            )
          ),

          // Locked overlay / password entry (demo)
          locked && React.createElement('div', { className: 'fixed inset-0 bg-black/80 flex items-center justify-center p-4' },
            React.createElement('div', { className: 'bg-white text-black rounded p-4 w-80' },
              React.createElement('h3', { className: 'font-semibold' }, 'Locked — Enter password'),
              React.createElement('input', { id: 'cloak-pwd-input', type: 'password', placeholder: 'Password', className: 'mt-3 w-full p-2 border rounded' }),
              React.createElement('div', { className: 'mt-3 flex justify-end gap-2' },
                React.createElement('button', { className: 'px-3 py-1 rounded border', onClick: () => {
                  const el = document.getElementById('cloak-pwd-input');
                  if (!el) return;
                  if (tryUnlock(el.value)) { setLocked(false); el.value = ''; } else alert('Wrong password (demo)');
                } }, 'Unlock')
              )
            )
          )
        )
      );
    }

    // Render the app
    const root = document.getElementById('root');
    ReactDOM.createRoot(root).render(React.createElement(App));
  </script>
</body>
</html>